// Generated by gencpp from file fixed_wing_formation_control/FWcmd.msg
// DO NOT EDIT!


#ifndef FIXED_WING_FORMATION_CONTROL_MESSAGE_FWCMD_H
#define FIXED_WING_FORMATION_CONTROL_MESSAGE_FWCMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Quaternion.h>

namespace fixed_wing_formation_control
{
template <class ContainerAllocator>
struct FWcmd_
{
  typedef FWcmd_<ContainerAllocator> Type;

  FWcmd_()
    : cmd_mode()
    , pitch_angle_sp(0.0)
    , yaw_angle_sp(0.0)
    , roll_angle_sp(0.0)
    , att_sp_quater()
    , throttle_sp(0.0)  {
    }
  FWcmd_(const ContainerAllocator& _alloc)
    : cmd_mode(_alloc)
    , pitch_angle_sp(0.0)
    , yaw_angle_sp(0.0)
    , roll_angle_sp(0.0)
    , att_sp_quater(_alloc)
    , throttle_sp(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _cmd_mode_type;
  _cmd_mode_type cmd_mode;

   typedef double _pitch_angle_sp_type;
  _pitch_angle_sp_type pitch_angle_sp;

   typedef double _yaw_angle_sp_type;
  _yaw_angle_sp_type yaw_angle_sp;

   typedef double _roll_angle_sp_type;
  _roll_angle_sp_type roll_angle_sp;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _att_sp_quater_type;
  _att_sp_quater_type att_sp_quater;

   typedef double _throttle_sp_type;
  _throttle_sp_type throttle_sp;





  typedef boost::shared_ptr< ::fixed_wing_formation_control::FWcmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fixed_wing_formation_control::FWcmd_<ContainerAllocator> const> ConstPtr;

}; // struct FWcmd_

typedef ::fixed_wing_formation_control::FWcmd_<std::allocator<void> > FWcmd;

typedef boost::shared_ptr< ::fixed_wing_formation_control::FWcmd > FWcmdPtr;
typedef boost::shared_ptr< ::fixed_wing_formation_control::FWcmd const> FWcmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fixed_wing_formation_control::FWcmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fixed_wing_formation_control::FWcmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fixed_wing_formation_control::FWcmd_<ContainerAllocator1> & lhs, const ::fixed_wing_formation_control::FWcmd_<ContainerAllocator2> & rhs)
{
  return lhs.cmd_mode == rhs.cmd_mode &&
    lhs.pitch_angle_sp == rhs.pitch_angle_sp &&
    lhs.yaw_angle_sp == rhs.yaw_angle_sp &&
    lhs.roll_angle_sp == rhs.roll_angle_sp &&
    lhs.att_sp_quater == rhs.att_sp_quater &&
    lhs.throttle_sp == rhs.throttle_sp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fixed_wing_formation_control::FWcmd_<ContainerAllocator1> & lhs, const ::fixed_wing_formation_control::FWcmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fixed_wing_formation_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fixed_wing_formation_control::FWcmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fixed_wing_formation_control::FWcmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fixed_wing_formation_control::FWcmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fixed_wing_formation_control::FWcmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fixed_wing_formation_control::FWcmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fixed_wing_formation_control::FWcmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fixed_wing_formation_control::FWcmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "62f17a12955286ad07282b54f80aad4a";
  }

  static const char* value(const ::fixed_wing_formation_control::FWcmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x62f17a12955286adULL;
  static const uint64_t static_value2 = 0x07282b54f80aad4aULL;
};

template<class ContainerAllocator>
struct DataType< ::fixed_wing_formation_control::FWcmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fixed_wing_formation_control/FWcmd";
  }

  static const char* value(const ::fixed_wing_formation_control::FWcmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fixed_wing_formation_control::FWcmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#固定翼控制指令的期望值		\n"
"string cmd_mode\n"
"\n"
"float64 pitch_angle_sp\n"
"\n"
"float64 yaw_angle_sp\n"
"\n"
"float64 roll_angle_sp\n"
"\n"
"geometry_msgs/Quaternion att_sp_quater #姿态四元数，只能在外面弄下旋转矩阵了\n"
"\n"
"float64 throttle_sp\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::fixed_wing_formation_control::FWcmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fixed_wing_formation_control::FWcmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd_mode);
      stream.next(m.pitch_angle_sp);
      stream.next(m.yaw_angle_sp);
      stream.next(m.roll_angle_sp);
      stream.next(m.att_sp_quater);
      stream.next(m.throttle_sp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FWcmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fixed_wing_formation_control::FWcmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fixed_wing_formation_control::FWcmd_<ContainerAllocator>& v)
  {
    s << indent << "cmd_mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.cmd_mode);
    s << indent << "pitch_angle_sp: ";
    Printer<double>::stream(s, indent + "  ", v.pitch_angle_sp);
    s << indent << "yaw_angle_sp: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_angle_sp);
    s << indent << "roll_angle_sp: ";
    Printer<double>::stream(s, indent + "  ", v.roll_angle_sp);
    s << indent << "att_sp_quater: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.att_sp_quater);
    s << indent << "throttle_sp: ";
    Printer<double>::stream(s, indent + "  ", v.throttle_sp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FIXED_WING_FORMATION_CONTROL_MESSAGE_FWCMD_H
