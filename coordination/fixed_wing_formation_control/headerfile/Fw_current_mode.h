// Generated by gencpp from file fixed_wing_formation_control/Fw_current_mode.msg
// DO NOT EDIT!


#ifndef FIXED_WING_FORMATION_CONTROL_MESSAGE_FW_CURRENT_MODE_H
#define FIXED_WING_FORMATION_CONTROL_MESSAGE_FW_CURRENT_MODE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fixed_wing_formation_control
{
template <class ContainerAllocator>
struct Fw_current_mode_
{
  typedef Fw_current_mode_<ContainerAllocator> Type;

  Fw_current_mode_()
    : planeID(0)
    , mode(0)  {
    }
  Fw_current_mode_(const ContainerAllocator& _alloc)
    : planeID(0)
    , mode(0)  {
  (void)_alloc;
    }



   typedef uint16_t _planeID_type;
  _planeID_type planeID;

   typedef uint8_t _mode_type;
  _mode_type mode;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(FW_IN_IDEL)
  #undef FW_IN_IDEL
#endif
#if defined(_WIN32) && defined(FW_IN_TAKEOFF)
  #undef FW_IN_TAKEOFF
#endif
#if defined(_WIN32) && defined(FW_IN_LANDING)
  #undef FW_IN_LANDING
#endif
#if defined(_WIN32) && defined(FW_IN_FORMATION)
  #undef FW_IN_FORMATION
#endif
#if defined(_WIN32) && defined(FW_IN_PROTECT)
  #undef FW_IN_PROTECT
#endif

  enum {
    FW_IN_IDEL = 0u,
    FW_IN_TAKEOFF = 1u,
    FW_IN_LANDING = 2u,
    FW_IN_FORMATION = 3u,
    FW_IN_PROTECT = 4u,
  };


  typedef boost::shared_ptr< ::fixed_wing_formation_control::Fw_current_mode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fixed_wing_formation_control::Fw_current_mode_<ContainerAllocator> const> ConstPtr;

}; // struct Fw_current_mode_

typedef ::fixed_wing_formation_control::Fw_current_mode_<std::allocator<void> > Fw_current_mode;

typedef boost::shared_ptr< ::fixed_wing_formation_control::Fw_current_mode > Fw_current_modePtr;
typedef boost::shared_ptr< ::fixed_wing_formation_control::Fw_current_mode const> Fw_current_modeConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fixed_wing_formation_control::Fw_current_mode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fixed_wing_formation_control::Fw_current_mode_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fixed_wing_formation_control::Fw_current_mode_<ContainerAllocator1> & lhs, const ::fixed_wing_formation_control::Fw_current_mode_<ContainerAllocator2> & rhs)
{
  return lhs.planeID == rhs.planeID &&
    lhs.mode == rhs.mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fixed_wing_formation_control::Fw_current_mode_<ContainerAllocator1> & lhs, const ::fixed_wing_formation_control::Fw_current_mode_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fixed_wing_formation_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fixed_wing_formation_control::Fw_current_mode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fixed_wing_formation_control::Fw_current_mode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fixed_wing_formation_control::Fw_current_mode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fixed_wing_formation_control::Fw_current_mode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fixed_wing_formation_control::Fw_current_mode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fixed_wing_formation_control::Fw_current_mode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fixed_wing_formation_control::Fw_current_mode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "756753c5e2c2b3f6d3413192d8ae1c59";
  }

  static const char* value(const ::fixed_wing_formation_control::Fw_current_mode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x756753c5e2c2b3f6ULL;
  static const uint64_t static_value2 = 0xd3413192d8ae1c59ULL;
};

template<class ContainerAllocator>
struct DataType< ::fixed_wing_formation_control::Fw_current_mode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fixed_wing_formation_control/Fw_current_mode";
  }

  static const char* value(const ::fixed_wing_formation_control::Fw_current_mode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fixed_wing_formation_control::Fw_current_mode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 planeID\n"
"\n"
"uint8 mode\n"
"\n"
"uint8 FW_IN_IDEL = 0 \n"
"\n"
"uint8 FW_IN_TAKEOFF = 1\n"
"\n"
"uint8 FW_IN_LANDING = 2\n"
"\n"
"uint8 FW_IN_FORMATION = 3\n"
"\n"
"uint8 FW_IN_PROTECT = 4\n"
;
  }

  static const char* value(const ::fixed_wing_formation_control::Fw_current_mode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fixed_wing_formation_control::Fw_current_mode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.planeID);
      stream.next(m.mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Fw_current_mode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fixed_wing_formation_control::Fw_current_mode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fixed_wing_formation_control::Fw_current_mode_<ContainerAllocator>& v)
  {
    s << indent << "planeID: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.planeID);
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FIXED_WING_FORMATION_CONTROL_MESSAGE_FW_CURRENT_MODE_H
