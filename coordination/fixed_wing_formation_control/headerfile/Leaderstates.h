// Generated by gencpp from file fixed_wing_formation_control/Leaderstates.msg
// DO NOT EDIT!


#ifndef FIXED_WING_FORMATION_CONTROL_MESSAGE_LEADERSTATES_H
#define FIXED_WING_FORMATION_CONTROL_MESSAGE_LEADERSTATES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Quaternion.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace fixed_wing_formation_control
{
template <class ContainerAllocator>
struct Leaderstates_
{
  typedef Leaderstates_<ContainerAllocator> Type;

  Leaderstates_()
    : planeID(0)
    , altitude_lock(false)
    , in_air(false)
    , control_mode()
    , pitch_angle(0.0)
    , yaw_angle(0.0)
    , yaw_valid(false)
    , roll_angle(0.0)
    , att_quater()
    , ground_speed_ned_n(0.0)
    , ground_speed_ned_e(0.0)
    , ground_speed_ned_d(0.0) 
    , ground_speed(0.0)
    , global_vel_x(0.0)
    , global_vel_y(0.0)
    , global_vel_z(0.0)
    , air_speed(0.0)
    , relative_hight(0.0)
    , latitude(0.0)
    , altitude(0.0)
    , longitude(0.0)
    , relative_alt(0.0)
    , ned_altitude(0.0)
    , ned_pos_x(0.0)
    , ned_pos_y(0.0)
    , ned_pos_z(0.0)
    , ned_vel_x(0.0)
    , ned_vel_y(0.0)
    , ned_vel_z(0.0)
    , ned_acc_x(0.0)
    , ned_acc_y(0.0)
    , ned_acc_z(0.0)
    , ned_acc()
    , body_acc_x(0.0)
    , body_acc_y(0.0)
    , body_acc_z(0.0)
    , body_acc()
    , battery_voltage(0.0)
    , battery_precentage(0.0)
    , battery_current(0.0)  
    , yaw_rate(0.0)
    , pitch_rate(0.0)
    , roll_rate(0.0)
    , rel_pos_Xb(0.0)
    , rel_pos_Yb(0.0)
    , rel_pos_Zb(0.0)
    , rel_vel_Xb(0.0)
    , rel_vel_Yb(0.0)
    , rel_vel_Zb(0.0)
    , rel_angle_a(0.0)
    , rel_angle_b(0.0)
    , rel_angle_c(0.0)
    , rel_att_pitch(0.0)
    , rel_att_roll(0.0)
    , rel_att_yaw(0.0)  {
    }
  Leaderstates_(const ContainerAllocator& _alloc)
    : planeID(0)
    , altitude_lock(false)
    , in_air(false)
    , control_mode()
    , pitch_angle(0.0)
    , yaw_angle(0.0)
    , yaw_valid(false)
    , roll_angle(0.0)
    , att_quater()
    , ground_speed_ned_n(0.0)
    , ground_speed_ned_e(0.0)
    , ground_speed_ned_d(0.0) 
    , ground_speed(0.0)
    , global_vel_x(0.0)
    , global_vel_y(0.0)
    , global_vel_z(0.0)
    , air_speed(0.0)
    , relative_hight(0.0)
    , latitude(0.0)
    , altitude(0.0)
    , longitude(0.0)
    , relative_alt(0.0)
    , ned_altitude(0.0)
    , ned_pos_x(0.0)
    , ned_pos_y(0.0)
    , ned_pos_z(0.0)
    , ned_vel_x(0.0)
    , ned_vel_y(0.0)
    , ned_vel_z(0.0)
    , ned_acc_x(0.0)
    , ned_acc_y(0.0)
    , ned_acc_z(0.0)
    , ned_acc()
    , body_acc_x(0.0)
    , body_acc_y(0.0)
    , body_acc_z(0.0)
    , body_acc()
    , battery_voltage(0.0)
    , battery_precentage(0.0)
    , battery_current(0.0)  
    , yaw_rate(0.0)
    , pitch_rate(0.0)
    , roll_rate(0.0)
    , rel_pos_Xb(0.0)
    , rel_pos_Yb(0.0)
    , rel_pos_Zb(0.0)
    , rel_vel_Xb(0.0)
    , rel_vel_Yb(0.0)
    , rel_vel_Zb(0.0)
    , rel_angle_a(0.0)
    , rel_angle_b(0.0)
    , rel_angle_c(0.0)
    , rel_att_pitch(0.0)
    , rel_att_roll(0.0)
    , rel_att_yaw(0.0)  {
  (void)_alloc;
    }


   typedef uint16_t _planeID_type;
  _planeID_type planeID;

   typedef uint8_t _altitude_lock_type;
  _altitude_lock_type altitude_lock;

   typedef uint8_t _in_air_type;
  _in_air_type in_air;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _control_mode_type;
  _control_mode_type control_mode;

   typedef double _pitch_angle_type;
  _pitch_angle_type pitch_angle;

   typedef double _yaw_angle_type;
  _yaw_angle_type yaw_angle;

   typedef uint8_t _yaw_valid_type;
  _yaw_valid_type yaw_valid;

   typedef double _roll_angle_type;
  _roll_angle_type roll_angle;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _att_quater_type;
  _att_quater_type att_quater;

   typedef double _ground_speed_ned_n_type;
  _ground_speed_ned_n_type ground_speed_ned_n;

   typedef double _ground_speed_ned_e_type;
  _ground_speed_ned_e_type ground_speed_ned_e;

   typedef double _ground_speed_ned_d_type;
  _ground_speed_ned_d_type ground_speed_ned_d;  

   typedef double _ground_speed_type;
  _ground_speed_type ground_speed;

   typedef double _global_vel_x_type;
  _global_vel_x_type global_vel_x;

   typedef double _global_vel_y_type;
  _global_vel_y_type global_vel_y;

   typedef double _global_vel_z_type;
  _global_vel_z_type global_vel_z;

   typedef double _airspeed_type;
  _airspeed_type airspeed;

   typedef double _relative_hight_type;
  _relative_hight_type relative_hight;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _altitude_type;
  _altitude_type altitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _relative_alt_type;
  _relative_alt_type relative_alt;

   typedef double _ned_pos_x_type;
  _ned_pos_x_type ned_pos_x;

   typedef double _ned_pos_y_type;
  _ned_pos_y_type ned_pos_y;

   typedef double _ned_pos_z_type;
  _ned_pos_z_type ned_pos_z;

   typedef double _ned_vel_x_type;
  _ned_vel_x_type ned_vel_x;

   typedef double _ned_vel_y_type;
  _ned_vel_y_type ned_vel_y;

   typedef double _ned_vel_z_type;
  _ned_vel_z_type ned_vel_z;

   typedef double _ned_acc_x_type;
  _ned_acc_x_type ned_acc_x;

   typedef double _ned_acc_y_type;
  _ned_acc_y_type ned_acc_y;

   typedef double _ned_acc_z_type;
  _ned_acc_z_type ned_acc_z;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _ned_acc_type;
  _ned_acc_type ned_acc;

   typedef double _body_acc_x_type;
  _body_acc_x_type body_acc_x;

   typedef double _body_acc_y_type;
  _body_acc_y_type body_acc_y;

   typedef double _body_acc_z_type;
  _body_acc_z_type body_acc_z;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _body_acc_type;
  _body_acc_type body_acc;

   typedef double _battery_voltage_type;
  _battery_voltage_type battery_voltage;

   typedef double _battery_precentage_type;
  _battery_precentage_type battery_precentage;

   typedef double _battery_current_type;
  _battery_current_type battery_current;  

   typedef double _yaw_rate_type;
  _yaw_rate_type yaw_rate;

   typedef double _roll_rate_type;
  _roll_rate_type roll_rate;

   typedef double _pitch_rate_type;
  _pitch_rate_type pitch_rate;

   typedef double _rel_pos_Xb_type;
  _rel_pos_Xb_type rel_pos_Xb;

   typedef double _rel_pos_Yb_type;
  _rel_pos_Yb_type rel_pos_Yb;

   typedef double _rel_pos_Zb_type;
  _rel_pos_Zb_type rel_pos_Zb;

   typedef double _rel_vel_Xb_type;
  _rel_vel_Xb_type rel_vel_Xb;

   typedef double _rel_vel_Yb_type;
  _rel_vel_Yb_type rel_vel_Yb;

   typedef double _rel_vel_Zb_type;
  _rel_vel_Zb_type rel_vel_Zb;

   typedef double _rel_angle_a_type;
  _rel_angle_a_type rel_angle_a;

   typedef double _rel_angle_b_type;
  _rel_angle_b_type rel_angle_b;

   typedef double _rel_angle_c_type;
  _rel_angle_c_type rel_angle_c;

   typedef double _rel_att_pitch_type;
  _rel_att_pitch_type rel_att_pitch;

   typedef double _rel_att_roll_type;
  _rel_att_roll_type rel_att_roll;

   typedef double _rel_att_yaw_type;
  _rel_att_yaw_type rel_att_yaw;





  typedef boost::shared_ptr< ::fixed_wing_formation_control::Leaderstates_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fixed_wing_formation_control::Leaderstates_<ContainerAllocator> const> ConstPtr;

}; // struct Leaderstates_

typedef ::fixed_wing_formation_control::Leaderstates_<std::allocator<void> > Leaderstates;

typedef boost::shared_ptr< ::fixed_wing_formation_control::Leaderstates > LeaderstatesPtr;
typedef boost::shared_ptr< ::fixed_wing_formation_control::Leaderstates const> LeaderstatesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fixed_wing_formation_control::Leaderstates_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fixed_wing_formation_control::Leaderstates_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fixed_wing_formation_control::Leaderstates_<ContainerAllocator1> & lhs, const ::fixed_wing_formation_control::Leaderstates_<ContainerAllocator2> & rhs)
{
  return lhs.planeID == rhs.planeID &&
    lhs.altitude_lock == rhs.altitude_lock &&
    lhs.in_air == rhs.in_air &&
    lhs.control_mode == rhs.control_mode &&
    lhs.pitch_angle == rhs.pitch_angle &&
    lhs.yaw_angle == rhs.yaw_angle &&
    lhs.yaw_valid == rhs.yaw_valid &&
    lhs.roll_angle == rhs.roll_angle &&
    lhs.att_quater == rhs.att_quater &&
    lhs.ground_speed_ned_n == rhs.ground_speed_ned_n &&
    lhs.ground_speed_ned_e == rhs.ground_speed_ned_e &&
    lhs.ground_speed_ned_d == rhs.ground_speed_ned_d &&    
    lhs.ground_speed == rhs.ground_speed &&
    lhs.global_vel_x == rhs.global_vel_x &&
    lhs.global_vel_y == rhs.global_vel_y &&
    lhs.global_vel_z == rhs.global_vel_z &&
    lhs.airspeed == rhs.airspeed &&
    lhs.relative_hight == rhs.relative_hight &&
    lhs.latitude == rhs.latitude &&
    lhs.altitude == rhs.altitude &&
    lhs.longitude == rhs.longitude &&
    lhs.relative_alt == rhs.relative_alt &&
    lhs.ned_altitude == rhs.ned_altitude &&
    lhs.ned_pos_x == rhs.ned_pos_x &&
    lhs.ned_pos_y == rhs.ned_pos_y &&
    lhs.ned_pos_z == rhs.ned_pos_z &&
    lhs.ned_vel_x == rhs.ned_vel_x &&
    lhs.ned_vel_y == rhs.ned_vel_y &&
    lhs.ned_vel_z == rhs.ned_vel_z &&
    lhs.ned_acc_x == rhs.ned_acc_x &&
    lhs.ned_acc_y == rhs.ned_acc_y &&
    lhs.ned_acc_z == rhs.ned_acc_z &&
    lhs.ned_acc == rhs.ned_acc &&
    lhs.body_acc_x == rhs.body_acc_x &&
    lhs.body_acc_y == rhs.body_acc_y &&
    lhs.body_acc_z == rhs.body_acc_z &&
    lhs.body_acc == rhs.body_acc &&
    lhs.battery_voltage == rhs.battery_voltage &&
    lhs.battery_precentage == rhs.battery_precentage &&
    lhs.battery_current == rhs.battery_current &&
    lhs.yaw_rate == rhs.yaw_rate &&
    lhs.pitch_rate == rhs.pitch_rate &&
    lhs.roll_rate == rhs.roll_rate &&
    lhs.rel_pos_Xb == rhs.rel_pos_Xb &&
    lhs.rel_pos_Yb == rhs.rel_pos_Yb &&
    lhs.rel_pos_Zb == rhs.rel_pos_Zb &&
    lhs.rel_vel_Xb == rhs.rel_vel_Xb &&
    lhs.rel_vel_Yb == rhs.rel_vel_Yb &&
    lhs.rel_vel_Zb == rhs.rel_vel_Zb &&
    lhs.rel_angle_a == rhs.rel_angle_a &&
    lhs.rel_angle_b == rhs.rel_angle_b &&
    lhs.rel_angle_c == rhs.rel_angle_c &&
    lhs.rel_att_pitch == rhs.rel_att_pitch &&
    lhs.rel_att_roll == rhs.rel_att_roll &&
    lhs.rel_att_yaw == rhs.rel_att_yaw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fixed_wing_formation_control::Leaderstates_<ContainerAllocator1> & lhs, const ::fixed_wing_formation_control::Leaderstates_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fixed_wing_formation_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fixed_wing_formation_control::Leaderstates_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fixed_wing_formation_control::Leaderstates_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fixed_wing_formation_control::Leaderstates_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fixed_wing_formation_control::Leaderstates_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fixed_wing_formation_control::Leaderstates_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fixed_wing_formation_control::Leaderstates_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fixed_wing_formation_control::Leaderstates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "efb0e54dc5a052d4b9891c8e58f9e323";
  }

  static const char* value(const ::fixed_wing_formation_control::Leaderstates_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xefb0e54dc5a052d4ULL;
  static const uint64_t static_value2 = 0xb9891c8e58f9e323ULL;
};

template<class ContainerAllocator>
struct DataType< ::fixed_wing_formation_control::Leaderstates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fixed_wing_formation_control/Leaderstates";
  }

  static const char* value(const ::fixed_wing_formation_control::Leaderstates_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fixed_wing_formation_control::Leaderstates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#本消息是定义的长机的状态消息，同样也包含了相对运动的关系\n"
"\n"
"#如果能得到领机的当前姿态信息，相当于协同\n"
"uint16 planeID\n"
"\n"
"bool altitude_lock\n"
"\n"
"bool in_air\n"
"\n"
"string control_mode\n"
"\n"
"float64 pitch_angle\n"
"\n"
"float64 yaw_angle\n"
"\n"
"bool yaw_valid\n"
"\n"
"float64 roll_angle\n"
"\n"
"geometry_msgs/Quaternion att_quater #姿态四元数，只能在外面弄下旋转矩阵了\n"
"\n"
"float64 ground_speed_ned_n\n"
"\n"
"float64 ground_speed_ned_e\n"
"\n"
"float64 ground_speed_ned_d\n"
"\n"
"float64 ground_speed\n"
"\n"
"float64 global_vel_x\n"
"\n"
"float64 global_vel_y\n"
"\n"
"float64 global_vel_z\n"
"\n"
"float64 airspeed\n"
"\n"
"float64 relative_hight\n"
"\n"
"#领机的绝对位置速度信息\n"
"float64 latitude\n"
"\n"
"float64 altitude\n"
"\n"
"float64 longitude\n"
"\n"
"float64 relative_alt\n"
"\n"
"float64 ned_altitude\n"
"\n"
"float64 ned_pos_x\n"
"\n"
"float64 ned_pos_y\n"
"\n"
"float64 ned_pos_z\n"
"\n"
"float64 ned_vel_x\n"
"\n"
"float64 ned_vel_y\n"
"\n"
"float64 ned_vel_z\n"
"\n"
"float64 ned_acc_x\n"
"\n"
"float64 ned_acc_y\n"
"\n"
"float64 ned_acc_z\n"
"\n"
"geometry_msgs/Vector3 ned_acc\n"
"\n"
"float64 body_acc_x\n"
"\n"
"float64 body_acc_y\n"
"\n"
"float64 body_acc_z\n"
"\n"
"geometry_msgs/Vector3 body_acc\n"
"\n"
"float64 battery_voltage\n"
"\n"
"float64 battery_precentage\n"
"\n"
"float64 battery_current\n"
"\n"
"#领机角速度信息\n"
"float64 yaw_rate\n"
"\n"
"float64 roll_rate\n"
"\n"
"float64 pitch_rate\n"
"\n"

"#领机与本机相对位置速度信息\n"
"float64 rel_pos_Xb\n"
"\n"
"float64 rel_pos_Yb\n"
"\n"
"float64 rel_pos_Zb\n"
"\n"
"float64 rel_vel_Xb\n"
"\n"
"float64 rel_vel_Yb\n"
"\n"
"float64 rel_vel_Zb\n"
"\n"
"float64 rel_angle_a#相对角度，之后再改名\n"
"\n"
"float64 rel_angle_b\n"
"\n"
"float64 rel_angle_c\n"
"\n"
"float64 rel_att_pitch\n"
"\n"
"float64 rel_att_roll\n"
"\n"
"float64 rel_att_yaw\n"
;
  }

  static const char* value(const ::fixed_wing_formation_control::Leaderstates_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fixed_wing_formation_control::Leaderstates_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.planeID);
      stream.next(m.altitude_lock);
      stream.next(m.in_air);
      stream.next(m.control_mode);
      stream.next(m.pitch_angle);
      stream.next(m.yaw_angle);
      stream.next(m.yaw_valid);
      stream.next(m.roll_angle);
      stream.next(m.att_quater);
      stream.next(m.ground_speed_ned_n);
      stream.next(m.ground_speed_ned_e);
      stream.next(m.ground_speed_ned_d);
      stream.next(m.ground_speed);
      stream.next(m.global_vel_x);
      stream.next(m.global_vel_y);
      stream.next(m.global_vel_z); 
      stream.next(m.airspeed);  
      stream.next(m.relative_hight);   
      stream.next(m.latitude);
      stream.next(m.altitude);
      stream.next(m.longitude);
      stream.next(m.relative_alt);
      stream.next(m.ned_altitude);
      stream.next(m.ned_pos_x);
      stream.next(m.ned_pos_y);
      stream.next(m.ned_pos_z);
      stream.next(m.ned_vel_x);
      stream.next(m.ned_vel_y);
      stream.next(m.ned_vel_z);
      stream.next(m.ned_acc_x);
      stream.next(m.ned_acc_y);
      stream.next(m.ned_acc_z);
      stream.next(m.ned_acc);
      stream.next(m.body_acc_x);
      stream.next(m.body_acc_y);
      stream.next(m.body_acc_z);
      stream.next(m.body_acc);
      stream.next(m.battery_voltage);
      stream.next(m.battery_precentage);
      stream.next(m.battery_current);
      stream.next(m.yaw_rate);
      stream.next(m.pitch_rate);
      stream.next(m.roll_rate);
      stream.next(m.rel_pos_Xb);
      stream.next(m.rel_pos_Yb);
      stream.next(m.rel_pos_Zb);
      stream.next(m.rel_vel_Xb);
      stream.next(m.rel_vel_Yb);
      stream.next(m.rel_vel_Zb);
      stream.next(m.rel_angle_a);
      stream.next(m.rel_angle_b);
      stream.next(m.rel_angle_c);
      stream.next(m.rel_att_pitch);
      stream.next(m.rel_att_roll);
      stream.next(m.rel_att_yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Leaderstates_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fixed_wing_formation_control::Leaderstates_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fixed_wing_formation_control::Leaderstates_<ContainerAllocator>& v)
  {
    s << indent << "planeID: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.planeID);
    s << indent << "altitude_lock: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.altitude_lock);
    s << indent << "in_air: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.in_air);
    s << indent << "control_mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.control_mode);
    s << indent << "pitch_angle: ";
    Printer<double>::stream(s, indent + "  ", v.pitch_angle);
    s << indent << "yaw_angle: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_angle);
    s << indent << "yaw_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.yaw_valid);
    s << indent << "roll_angle: ";
    Printer<double>::stream(s, indent + "  ", v.roll_angle);
    s << indent << "att_quater: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.att_quater);
    s << indent << "ground_speed_ned_n: ";
    Printer<double>::stream(s, indent + "  ", v.ground_speed_ned_n);
    s << indent << "ground_speed_ned_e: ";
    Printer<double>::stream(s, indent + "  ", v.ground_speed_ned_e);
    s << indent << "ground_speed_ned_d: ";
    Printer<double>::stream(s, indent + "  ", v.ground_speed_ned_d);
    s << indent << "ground_speed: ";
    Printer<double>::stream(s, indent + "  ", v.ground_speed);
    s << indent << "global_vel_x: ";
    Printer<double>::stream(s, indent + "  ", v.global_vel_x);
    s << indent << "global_vel_y: ";
    Printer<double>::stream(s, indent + "  ", v.global_vel_y);
    s << indent << "global_vel_z: ";
    Printer<double>::stream(s, indent + "  ", v.global_vel_z);
    s << indent << "airspeed: ";
    Printer<double>::stream(s, indent + "  ", v.airspeed);
    s << indent << "relative_hight: ";
    Printer<double>::stream(s, indent + "  ", v.relative_hight);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "relative_alt: ";
    Printer<double>::stream(s, indent + "  ", v.relative_alt);
    s << indent << "ned_altitude: ";
    Printer<double>::stream(s, indent + "  ", v.ned_altitude);
    s << indent << "ned_pos_x: ";
    Printer<double>::stream(s, indent + "  ", v.ned_pos_x);
    s << indent << "ned_pos_y: ";
    Printer<double>::stream(s, indent + "  ", v.ned_pos_y);
    s << indent << "ned_pos_z: ";
    Printer<double>::stream(s, indent + "  ", v.ned_pos_z);
    s << indent << "ned_vel_x: ";
    Printer<double>::stream(s, indent + "  ", v.ned_vel_x);
    s << indent << "ned_vel_y: ";
    Printer<double>::stream(s, indent + "  ", v.ned_vel_y);
    s << indent << "ned_vel_z: ";
    Printer<double>::stream(s, indent + "  ", v.ned_vel_z);
    
    s << indent << "ned_acc_x: ";
    Printer<double>::stream(s, indent + "  ", v.ned_acc_x);
    s << indent << "ned_acc_y: ";
    Printer<double>::stream(s, indent + "  ", v.ned_acc_y);
    s << indent << "ned_acc_z: ";
    Printer<double>::stream(s, indent + "  ", v.ned_acc_z);
    s << indent << "ned_acc: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.ned_acc);    
    s << indent << "body_acc_x: ";
    Printer<double>::stream(s, indent + "  ", v.body_acc_x);
    s << indent << "body_acc_y: ";
    Printer<double>::stream(s, indent + "  ", v.body_acc_y);
    s << indent << "body_acc_z: ";
    Printer<double>::stream(s, indent + "  ", v.body_acc_z);
    s << indent << "body_acc: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.body_acc);
    s << indent << "battery_voltage: ";
    Printer<double>::stream(s, indent + "  ", v.battery_voltage);
    s << indent << "battery_precentage: ";
    Printer<double>::stream(s, indent + "  ", v.battery_precentage);
    s << indent << "battery_current: ";
    Printer<double>::stream(s, indent + "  ", v.battery_current);    
    s << indent << "yaw_rate: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_rate);
    s << indent << "pitch_rate: ";
    Printer<double>::stream(s, indent + "  ", v.pitch_rate);
    s << indent << "roll_rate: ";
    Printer<double>::stream(s, indent + "  ", v.roll_rate);
    s << indent << "rel_pos_Xb: ";
    Printer<double>::stream(s, indent + "  ", v.rel_pos_Xb);
    s << indent << "rel_pos_Yb: ";
    Printer<double>::stream(s, indent + "  ", v.rel_pos_Yb);
    s << indent << "rel_pos_Zb: ";
    Printer<double>::stream(s, indent + "  ", v.rel_pos_Zb);
    s << indent << "rel_vel_Xb: ";
    Printer<double>::stream(s, indent + "  ", v.rel_vel_Xb);
    s << indent << "rel_vel_Yb: ";
    Printer<double>::stream(s, indent + "  ", v.rel_vel_Yb);
    s << indent << "rel_vel_Zb: ";
    Printer<double>::stream(s, indent + "  ", v.rel_vel_Zb);
    s << indent << "rel_angle_a: ";
    Printer<double>::stream(s, indent + "  ", v.rel_angle_a);
    s << indent << "rel_angle_b: ";
    Printer<double>::stream(s, indent + "  ", v.rel_angle_b);
    s << indent << "rel_angle_c: ";
    Printer<double>::stream(s, indent + "  ", v.rel_angle_c);
    s << indent << "rel_att_pitch: ";
    Printer<double>::stream(s, indent + "  ", v.rel_att_pitch);
    s << indent << "rel_att_roll: ";
    Printer<double>::stream(s, indent + "  ", v.rel_att_roll);
    s << indent << "rel_att_yaw: ";
    Printer<double>::stream(s, indent + "  ", v.rel_att_yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FIXED_WING_FORMATION_CONTROL_MESSAGE_LEADERSTATES_H
